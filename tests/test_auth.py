# tests/test_auth.py
# Ojos Project
#
# Tests that tokens are correctly created, registered, and verified

import pytest
import time
import psycopg2
# from flask import Flask
import jwt
from src.db import _create_tables, _drop_tables
import src.auth as auth
from src.app import DB, JWT_SECRET_KEY
from src.__init__ import create_app
# from datetime import timedelta


@pytest.fixture(autouse=True)
def reset_database():
    # resets the database before each test
    _drop_tables()
    _create_tables()


def _get_single_token():
    # when tokens contains only 1 token (which it will for most of these tests),
    # call the db & return that token
    with psycopg2.connect(DB) as conn:
        with conn.cursor() as cursor:
            cursor.execute("SELECT token FROM tokens;")
            result = cursor.fetchone()
    return result[0]


def _add_token(expiration):
    token = jwt.encode(
        {"id": "user_id", "expiration": expiration},
        JWT_SECRET_KEY,
        algorithm="HS256"
    )
    with psycopg2.connect(DB) as conn:
        with conn.cursor() as cursor:
            cursor.execute("INSERT INTO tokens (token, expiration_date) VALUES (%s, %s) ON CONFLICT (token) DO UPDATE SET expiration_date = EXCLUDED.expiration_date;",
                           (token, expiration))
    return token


def test_generate_token_added_to_db():
    test_token = auth._generate_token("test_id")
    result = _get_single_token()

    assert result == test_token


def test_register_tokens_successfully():
    app = create_app()
    client = app.test_client()
    response = client.post("/iris/auth/register/")
    assert response.status_code == 200

    test_token = _get_single_token()
    assert response.get_json()["token"] == test_token


def test_expired_tokens_checked_correctly():
    # add an expired token
    expired_expiration = time.time() - 1000
    expired_token = _add_token(expired_expiration)
    assert auth._token_is_expired(expired_token)

    # add an unexpired token
    unexpired_expiration = time.time() + 1000
    unexpired_token = _add_token(unexpired_expiration)
    assert not auth._token_is_expired(unexpired_token)


def test_expired_tokens_updated():
    expired_expiration = time.time() - 1000
    expired_token = _add_token(expired_expiration)
    added_token = _get_single_token()

    app = create_app()
    client = app.test_client()
    payload = {"token": expired_token}
    response = client.post("/iris/auth/update-token/", json=payload)

    assert response.status_code == 200
    # assert that the expired token we added is different than the one
    # generated by update_token
    assert response.get_json()["token"] != added_token


def test_unexpired_tokens_not_updated():
    unexpired_expiration = time.time() + 1000
    unexpired_token = _add_token(unexpired_expiration)
    added_token = _get_single_token()

    app = create_app()
    client = app.test_client()
    payload = {"token": unexpired_token}
    response = client.post("/iris/auth/update-token/", json=payload)

    assert response.status_code == 200
    # assert that the unexpired token we added is the same as the one
    # generated by update_token
    assert response.get_json()["token"] == added_token


def test_error_returned_by_invalid_update_post_requests():
    invalid_token = "invalid_token"

    app = create_app()
    client = app.test_client()
    payload = {"token": invalid_token}
    response = client.post("/iris/auth/update-token/", json=payload)

    assert response.status_code != 200
